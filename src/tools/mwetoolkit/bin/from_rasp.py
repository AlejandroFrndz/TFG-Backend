#! /usr/bin/env python3
# -*- coding:UTF-8 -*-

###############################################################################
#
# Copyright 2010-2014 Carlos Ramisch, Vitor De Araujo, Silvio Ricardo Cordeiro,
# Sandra Castellanos, MaitÃª Dupont
#
# rasp2xml.py is part of mwetoolkit
#
# mwetoolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mwetoolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with mwetoolkit.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
"""
    This script transforms the output format of Rasp to other supported 
    mwetoolkit corpus formats, as required by the scripts. Only UTF-8 text is
    accepted. For generating the surface forms (not provided by RASP), please
    indicate the path to morphg program, provided with older versions of RASP
    and unfortunately not available anymore (but send me an email if you need
    it ;-)
    
    For more information, call the script with no parameter and read the
    usage instructions.
"""


import sys
import os.path

from libs import util
from libs.filetype import ft_rasp
from libs import filetype



###############################################################################
# GLOBALS

usage_string = """\
Usage: {progname} OPTIONS <corpus.RASP>
Convert input corpus in "RASP" format into another corpus format.

The RASP input must be generated by RASP parser version 2 or 3, without the -m 
option. Option -p"-w N" is also supported and will not include syntactic 
information for long sentences. If you want to obtain surface forms from RASP
output, specify path to --morphg.
    

OPTIONS may be:

-m <absolute-morphg-path> OR --morphg <absolute-morphg-path>
    <absolute-morphg-path> is the path to morphg utility (provided with RASP 2). 
    If this option is activated, you should provide the absolute path to the
    morphg executable. May be considerably slow since morphg is called once per
    word.
    
-r <num> OR --rasp-version <num>
    <num> must be 2 or 3. By default, supposes version 2 ans switches to version
    3 if detects presence of "gr-list: 1" line. This simple rule generally works
    and this option should not be required.
    
--to <output-filetype-ext>
    Convert input to given filetype extension.
    (By default, converts input to "XML" format):
    {descriptions.output[corpus]}

{common_options}
"""
morphg_folder = None
morphg_file = None
output_filetype_ext = "XML"
rasp_version = 2

###############################################################################


class RaspHandler(filetype.ChainedInputHandler):
    """For each entity in the file, run the given commands."""
    
    def __init__(self, morphg_file, morphg_folder):
        self.morphg_file = morphg_file
        self.morphg_folder = morphg_folder
    
    def before_file(self, fileobj, ctxinfo):    
        if self.morphg_folder:
            self.work_folder = os.getcwd()
            os.chdir(self.morphg_folder)
        if not self.chain:
            self.chain = self.make_printer(ctxinfo, output_filetype_ext)            
        self.chain.before_file(fileobj, ctxinfo)
        
    def after_file(self, fileobj, ctxinfo):
        if self.morphg_folder:            
            os.chdir(self.work_folder)
        self.chain.before_file(fileobj, ctxinfo)        

###############################################################################

def treat_options(opts, arg, n_arg, usage_string):
    """  
    Callback function that handles the command options of this script.

    @param opts The options parsed by getopts. Ignored.

    @param arg The argument list parsed by getopts.

    @param n_arg The number os arguments expected for this script.

    @param usage_string Instructions that appear if you run the program with
    the wrong parameters or options.
    """
    global morphg_folder
    global morphg_file
    global output_filetype_ext
    global rasp_version    

    ctxinfo = util.CmdlineContextInfo(opts)
    util.treat_options_simplest(opts, arg, n_arg, usage_string)

    for o, a in ctxinfo.iter(opts):
        if o in ("-r","--rasp-version"):
            if a != "2" and a != "3" :
                util.error("RASP version must be 2 or 3, other values invalid")
            else :
                rasp_version = int(a)                
        if o in ("-m","--morphg"):
            morphg_folder, morphg_file = os.path.split(a)               
            if not os.path.exists(os.path.join(morphg_folder, morphg_file)) :
                util.error( "morphg not found at path {}".format(a) )
        
################################################################################     
# MAIN SCRIPT

longopts = ["morphg=", "rasp-version=", "to="]
args = util.read_options("m:r:", longopts, treat_options, -1, usage_string)
parser = ft_rasp.RaspParser(morphg_file, morphg_folder, 
                            rasp_version=rasp_version, encoding="utf-8")
filetype.parse(args, RaspHandler(morphg_file, morphg_folder), parser=parser)
